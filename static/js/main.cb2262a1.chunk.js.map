{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","content","author","quotes","quote","id","handleClick","e","_this","length","newQuote","Object","toConsumableArray","sort","a","b","Math","random","console","log","newContent","newAuthor","setState","shift","this","react_default","createElement","Container","className","Row","Col","Button","color","onClick","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRA6DeA,6MAzDbC,MAAQ,CACNC,QAAS,GACTC,OAAQ,GACRC,OAAQ,CACN,CAACC,MAAO,+FAAgGF,OAAQ,aAAcG,GAAI,GAClI,CAACD,MAAO,2EAA4EF,OAAQ,mBAAmBG,GAAI,GACnH,CAACD,MAAO,qEAAsEF,OAAQ,wBAAwBG,GAAI,GAClH,CAACD,MAAO,4CAA6CF,OAAQ,aAAaG,GAAI,GAC9E,CAACD,MAAO,+CAAgDF,OAAQ,gBAAgBG,GAAI,GACpF,CAACD,MAAO,8EAA+EF,OAAQ,uBAAuBG,GAAI,GAC1H,CAACD,MAAO,+DAAgEF,OAAQ,sBAAsBG,GAAI,GAC1G,CAACD,MAAO,iPAAkPF,OAAQ,iBAAiBG,GAAI,GACvR,CAACD,MAAO,4GAA6GF,OAAQ,cAAcG,GAAI,GAC/I,CAACD,MAAO,oCAAqCF,OAAQ,oBAAoBG,GAAI,OAajFC,YAAc,SAACC,GACb,GAAIC,EAAKR,MAAMG,OAAOM,OAAS,EAAG,CAChC,IAAIC,EAAWC,OAAAC,EAAA,EAAAD,CAAIH,EAAKR,MAAMG,QAAQU,KAAK,SAACC,EAAGC,GAAJ,MAAU,GAAMC,KAAKC,WAChEC,QAAQC,IAAIT,GACZ,IAAIU,EAAaV,EAAS,GAAGN,MACzBiB,EAAYX,EAAS,GAAGR,OAC5BM,EAAKc,SAAS,CAACrB,QAASmB,EAAYlB,OAAQmB,IAC5CX,EAASa,QACTL,QAAQC,IAAIT,GACZF,EAAKc,SAAS,CAACnB,OAAQO,SACjBF,EAAKc,SAAS,CAACrB,QAAS,4BAA6BC,OAAQ,uHAnBrE,IAAIQ,EAAWC,OAAAC,EAAA,EAAAD,CAAIa,KAAKxB,MAAMG,QAAQU,KAAK,SAACC,EAAGC,GAAJ,MAAU,GAAMC,KAAKC,WAChEC,QAAQC,IAAIT,GACZ,IAAIU,EAAaV,EAAS,GAAGN,MACzBiB,EAAYX,EAAS,GAAGR,OAC5BsB,KAAKF,SAAS,CAACrB,QAASmB,EAAYlB,OAAQmB,IAC5CX,EAASa,QACTL,QAAQC,IAAIT,GACZc,KAAKF,SAAS,CAACnB,OAAQO,qCAgBvB,OACEe,EAAAX,EAAAY,cAACC,EAAA,EAAD,CAAWtB,GAAG,YAAYuB,UAAU,UAClCH,EAAAX,EAAAY,cAACG,EAAA,EAAD,CAAKD,UAAU,2BACbH,EAAAX,EAAAY,cAACI,EAAA,EAAD,CAAKF,UAAU,eACbH,EAAAX,EAAAY,cAAA,6BACAD,EAAAX,EAAAY,cAAA,MAAIrB,GAAG,QAAQmB,KAAKxB,MAAMC,SAAawB,EAAAX,EAAAY,cAAA,WACvCD,EAAAX,EAAAY,cAAA,MAAIrB,GAAG,UAAUmB,KAAKxB,MAAME,QAC5BuB,EAAAX,EAAAY,cAACK,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAST,KAAKlB,YAAaD,GAAG,aAAtD,eACAoB,EAAAX,EAAAY,cAAA,WACAD,EAAAX,EAAAY,cAAA,KAAGQ,KAAK,2BAA2B7B,GAAG,eAAtC,uBAlDM8B,IAAMC,WCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAX,EAAAY,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cb2262a1.chunk.js","sourcesContent":["import React from 'react';\nimport {Button, Container, Col, Row} from 'reactstrap' \n\nclass App extends React.Component {\n  state = {\n    content: '',\n    author: '',\n    quotes: [\n      {quote: 'I love you the more in that I believe you had liked me for my own sake and for nothing else.', author: 'John Keats', id: 1},\n      {quote: 'But man is not made for defeat. A man can be destroyed but not defeated.', author: 'Ernest Hemingway',id: 2},\n      {quote: 'When you reach the end of your rope, tie a knot in it and hang on.', author: 'Franklin D. Roosevelt',id: 3},\n      {quote: 'There is nothing permanent except change.', author: 'Heraclitus',id: 4},\n      {quote: 'You cannot shake hands with a clenched fist.', author: 'Indira Gandhi',id: 5},\n      {quote: 'Let us sacrifice our today so that our children can have a better tomorCol.', author: 'A. P. J. Abdul Kalam',id: 6},\n      {quote: 'It is better to be feared than loved, if you cannot be both.', author: 'Niccolo Machiavelli',id: 7},\n      {quote: 'The most difficult thing is the decision to act, the rest is merely tenacity. The fears are paper tigers. You can do anything you decide to do. You can act to change and control your life; and the procedure, the process is its own reward.', author: 'Amelia Earhart',id: 8},\n      {quote: 'Do not mind anything that anyone tells you about anyone else. Judge everyone and everything for yourself.', author: 'Henry James',id: 9},\n      {quote: 'Learning never exhausts the mind.', author: 'Leonardo da Vinci',id: 0}\n    ]\n  }\n  componentWillMount() {\n    let newQuote = [...this.state.quotes].sort((a, b) => 0.5 - Math.random());\n    console.log(newQuote);\n    let newContent = newQuote[0].quote;\n    let newAuthor = newQuote[0].author;\n    this.setState({content: newContent, author: newAuthor})\n    newQuote.shift();\n    console.log(newQuote);\n    this.setState({quotes: newQuote})\n  }\n  handleClick = (e) => {\n    if (this.state.quotes.length > 0) {\n      let newQuote = [...this.state.quotes].sort((a, b) => 0.5 - Math.random());\n      console.log(newQuote);\n      let newContent = newQuote[0].quote;\n      let newAuthor = newQuote[0].author;\n      this.setState({content: newContent, author: newAuthor})\n      newQuote.shift();\n      console.log(newQuote);\n      this.setState({quotes: newQuote})\n    } else {this.setState({content: \"No more quote for you ><'\", author: \"By: The best boyfriend ever!!\"})}\n  }\n  \n  render() {\n    return (\n      <Container id=\"quote-box\" className=\"vh-100\">\n        <Row className=\"align-items-center h-75\">\n          <Col className=\"text-center\">\n            <h1>Your quote is: </h1>\n            <h1 id=\"text\">{this.state.content}</h1><br/>\n            <h1 id=\"author\">{this.state.author}</h1>\n            <Button color=\"primary\" onClick={this.handleClick} id=\"new-quote\">Give quote!</Button>\n            <br/>\n            <a href=\"twitter.com/intent/tweet\" id=\"tweet-quote\">Tweet me!</a>\n          </Col>\n        </Row>  \n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}